{{- $csiBinaries := "/usr/bin/curl" }}
# Required for external analytics. Do not remove!
---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
fromImage: builder/src
final: false

git:
  - add: {{ .ModuleDir }}
    to: /src
    includePaths:
      - api
      - images/{{ $.ImageName }}
    stageDependencies:
      install:
        - '**/*'
    excludePaths:
      - images/{{ $.ImageName }}/werf.yaml

shell:
  install:
    - echo "src artifact"

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
fromImage: builder/golang-alpine
final: false

import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
    add: /src
    to: /src
    before: install

mount:
{{ include "mount points for golang builds" . }}

secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}

shell:
  setup:
    - cd /src/images/{{ $.ImageName }}/cmd
    - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /{{ $.ImageName }}
    - chmod +x /{{ $.ImageName }}

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
fromImage: builder/alt
final: false

git:
  - add: {{ .ModuleDir }}tools/dev_images/additional_tools/binary_replace.sh
    to: /binary_replace.sh
    stageDependencies:
      install:
        - '**/*'

shell:
  install:
    {{- include "alt packages proxy" . | nindent 4 }}
    - apt-get update
    - apt-get -y install glibc-utils mount nfs-utils curl
    - rm -rf /var/lib/apt/lists/* /var/cache/apt/* && mkdir -p /var/lib/apt/lists/partial /var/cache/apt/archives/partial
    - chmod +x /binary_replace.sh
    - /binary_replace.sh -i "{{ $csiBinaries }}" -o /relocate

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
fromImage: base/distroless

import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
    add: /{{ $.ImageName }}
    to: /{{ $.ImageName }}
    before: install
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
    add: /relocate
    to: /
    before: install
    includePaths:
      - '**/*'

docker:
  ENTRYPOINT: ["/{{ $.ImageName }}"]
  USER: deckhouse:deckhouse
